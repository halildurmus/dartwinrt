name: dartwinrt
repository: https://github.com/halildurmus/dartwinrt

packages:
  - packages/*

command:
  bootstrap:
    # It seems so that running "pub get" in parallel has some issues (like
    # https://github.com/dart-lang/pub/issues/3404). Disabling this feature
    # makes the CI much more stable.
    runPubGetInParallel: false
  version:
    linkToCommits: true
    workspaceChangelog: true

scripts:
  add-api:
    description: Add new WinRT APIs to be generated by winrtgen.
    run: cd packages\winrtgen && dart bin\add_api.dart

  generate:
    description: Generate WinRT APIs and format all files.
    run: melos run generate-apis && melos run format

  generate-and-test:
    description: Generate WinRT APIs, format all files, and run tests.
    run: melos run generate && melos run test:all

  update-goldens:
    description: Update golden files with the latest generated output.
    run: cd packages\winrtgen && dart bin\update_goldens.dart

  publish:
    description: Publish all packages to pub.dev after validation.
    run: >
      melos run prepare-publish:all && melos run force-publish:all

  test:all:
    description: Run all tests available.
    run: melos run test --no-select

  test:
    description: Run `dart test` for a specific package.
    run: dart test
    exec:
      concurrency: 6
      failFast: true
    packageFilters:
      dirExists:
        - test

  analyze:
    description: Run `dart analyze . --fatal-infos` in all packages.
    run: dart analyze . --fatal-infos
    exec:
      concurrency: 6

  clean:
    description: >
      Clean things very deeply, can be used to establish "pristine checkout"
      status.
    run: git clean -x -d -f -q

  format:
    description: Run `dart format . --show=none` in all packages.
    run: dart format . --show=none
    exec:
      concurrency: 6

  generate-apis:
    description: Generate WinRT APIs.
    run: cd packages\winrtgen && dart bin\generate.dart

  prepare-publish:all:
    description: Run `melos run prepare-publish` in all packages.
    run: melos run prepare-publish --no-select

  prepare-publish:
    description: Run `dart pub publish --dry-run` for a specific package.
    run: dart pub publish --dry-run
    exec:
      concurrency: 6
      failFast: true
    packageFilters:
      private: false

  force-publish:all:
    description: Forcefully publish all packages to pub.dev without validation.
    run: melos run force-publish --no-select

  force-publish:
    description: Forcefully publish a package to pub.dev without validation.
    run: dart pub publish -f --skip-validation
    exec:
      concurrency: 6
      failFast: true
    packageFilters:
      private: false

  qualitycheck:
    description: >
      Run all targets generally expected in CI for a full local quality check.
    run: >
      melos run clean &&
      melos clean &&
      melos bootstrap &&
      melos run analyze &&
      melos run format &&
      melos run test:all &&
      melos run prepare-publish:all

  add-license-header:
    description: Add a license header to all necessary files.
    # If you add here another --ignore flag, add it also to
    # "check-license-header".
    run: |
      addlicense -f header_template.txt \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        --ignore "**/flutter/generated_plugin_registrant.h" \
        --ignore "**/flutter/generated_plugin_registrant.cc" \
        .

  check-license-header:
    description: Verify that all necessary files have a license header.
    # If you add here another --ignore flag, add it also to
    # "add-license-header".
    run: |
      addlicense -f header_template.txt \
        --check \
        --ignore "**/*.yml" \
        --ignore "**/*.yaml" \
        --ignore "**/*.xml" \
        --ignore "**/*.g.dart" \
        --ignore "**/*.sh" \
        --ignore "**/*.html" \
        --ignore "**/*.js" \
        --ignore "**/*.ts" \
        --ignore "**/*.g.h" \
        --ignore "**/*.g.m" \
        --ignore "**/*.rb" \
        --ignore "**/*.txt" \
        --ignore "**/*.cmake" \
        --ignore "**/Runner/AppDelegate.swift" \
        --ignore "**/Runner/MainFlutterWindow.swift" \
        --ignore "**/Runner/Runner-Bridging-Header.h" \
        --ignore "**/Runner/AppDelegate.h" \
        --ignore "**/Runner/AppDelegate.m" \
        --ignore "**/Runner/main.m" \
        --ignore "**/MainActivity.kt" \
        --ignore "**/MainActivity.java" \
        --ignore "**/FlutterMultiDexApplication.java" \
        --ignore "**/GeneratedPluginRegistrant.swift" \
        --ignore "**/Pods/**" \
        --ignore "**/flutter/generated_plugin_registrant.h" \
        --ignore "**/flutter/generated_plugin_registrant.cc" \
        .
